//-----------------------------------------------------------------------------
// File : asfOffsetAllocator.h
// Desc : Offset Allocator.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <array>
#include <asfSpinLock.h>


namespace asf {

///////////////////////////////////////////////////////////////////////////////
// OffsetHandle class
///////////////////////////////////////////////////////////////////////////////
class OffsetHandle
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    friend class OffsetAllocator;

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    static const uint32_t INVALID_OFFSET = UINT32_MAX;

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    OffsetHandle() = default;

    //-------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //! 
    //! @param[in]      handle      コピーする値.
    //-------------------------------------------------------------------------
    OffsetHandle(const OffsetHandle& handle);

    //-------------------------------------------------------------------------
    //! @brief      オフセット値を取得します.
    //! 
    //! @return     オフセット値を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetOffset() const;

    //-------------------------------------------------------------------------
    //! @brief      サイズを取得します.
    //! 
    //! @return     サイズを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetSize() const;

    //-------------------------------------------------------------------------
    //! @brief      ハンドルが有効化チェックします.
    //! 
    //! @retval true    有効.
    //! @retval false   無効.
    //-------------------------------------------------------------------------
    bool IsValid() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t    m_Offset    = INVALID_OFFSET;   //!< オフセット値.
    uint32_t    m_Size      = 0;                //!< サイズ.
    uint32_t    m_MetaData  = INVALID_OFFSET;   //!< メタデータ番号.

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //! 
    //! @param[in]      offset      オフセット値.
    //! @param[in]      size        サイズ.
    //! @param[in]      metaData    メタデータ.
    //-------------------------------------------------------------------------
    OffsetHandle(uint32_t offset, uint32_t size, uint32_t metaData);

    //-------------------------------------------------------------------------
    //! @brief      無効化します.
    //-------------------------------------------------------------------------
    void Reset();
};


///////////////////////////////////////////////////////////////////////////////
// OffsetAllocator class
///////////////////////////////////////////////////////////////////////////////
class OffsetAllocator
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    static constexpr uint32_t TOP_BINS_COUNT    = 32;
    static constexpr uint32_t BINS_PER_LEAF     = 8;
    static constexpr uint32_t LEAF_BINS_COUNT   = TOP_BINS_COUNT * BINS_PER_LEAF;

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    OffsetAllocator() = default;

    //-------------------------------------------------------------------------
    //! @brief      ムーブコンストラクタです.
    //-------------------------------------------------------------------------
    OffsetAllocator(OffsetAllocator&& other) noexcept;

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      size                    確保サイズ.
    //! @param[in]      maxAllocatableCount     確保可能な最大回数.
    //-------------------------------------------------------------------------
    void Init(uint32_t size, uint32_t maxAllocatableCount = 128 * 1024);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      リセットします.
    //-------------------------------------------------------------------------
    void Reset();

    //-------------------------------------------------------------------------
    //! @brief      メモリを確保します.
    //! 
    //! @param[in]      size        メモリ確保サイズ.
    //! @return     オフセットハンドルを返却します.
    //-------------------------------------------------------------------------
    OffsetHandle Alloc(uint32_t size);

    //-------------------------------------------------------------------------
    //! @brief      メモリを確保します.
    //! 
    //! @param[in]      size        メモリ確保サイズ.
    //! @param[in]      alignment   メモリアライメント.
    //! @return     オフセットハンドルを返却します.
    //-------------------------------------------------------------------------
    OffsetHandle Alloc(uint32_t size, uint32_t alignment);

    //-------------------------------------------------------------------------
    //! @brief      メモリを解放します.
    //-------------------------------------------------------------------------
    void Free(OffsetHandle& handle);

    //-------------------------------------------------------------------------
    //! @brief      使用サイズを取得します.
    //! 
    //! @return     使用サイズを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetUsedSize() const;

    //-------------------------------------------------------------------------
    //! @brief      未使用サイズを取得します.
    //! 
    //! @return     未使用サイズを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetFreeSize() const;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Node structure
    ///////////////////////////////////////////////////////////////////////////
    struct Node
    {
        static constexpr uint32_t UNUSED = UINT32_MAX;

        uint32_t    DataOffset      = 0;
        uint32_t    DataSize        = 0;
        uint32_t    BinListPrev     = UNUSED;
        uint32_t    BinListNext     = UNUSED;
        uint32_t    NeighborPrev    = UNUSED;
        uint32_t    NeighborNext    = UNUSED;
        bool        Used            = false;
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t    m_Size                  = 0;        //!< メモリサイズ.
    uint32_t    m_MaxAllocatableCount   = 0;        //!< 最大確保可能回数.
    uint32_t    m_FreeStorage           = 0;        //!< 未使用ストレージ.
    uint32_t    m_UsedBinsTop           = 0;        //!< 使用中ビンの先頭.
    Node*       m_Nodes                 = nullptr;  //!< ノード.
    uint32_t*   m_FreeNodes             = nullptr;  //!< フリーノード.
    int64_t     m_FreeOffset            = -1;       //!< フリーオフセット.

    std::array<uint8_t,  TOP_BINS_COUNT>    m_UsedBins;     //!< 使用中ビン.
    std::array<uint32_t, LEAF_BINS_COUNT>   m_BinIndices;   //!< ビン番号.

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      ビンにノードを挿入します.
    //! 
    //! @param[in]      size        データサイズ.
    //! @param[in]      offset      データオフセット.
    //-------------------------------------------------------------------------
    uint32_t InsertNode(uint32_t size, uint32_t offset);

    //-------------------------------------------------------------------------
    //! @brief      ビンからノードを削除します.
    //! 
    //! @param[in]      index       ノード番号.
    //-------------------------------------------------------------------------
    void RemoveNode(uint32_t index);

    //-------------------------------------------------------------------------
    //! @brief      ノードを生成します.
    //-------------------------------------------------------------------------
    static Node GenNode(uint32_t offset, uint32_t size, uint32_t binListNext);
};

///////////////////////////////////////////////////////////////////////////////
// ThreadSafeOffsetAllocator class
///////////////////////////////////////////////////////////////////////////////
class ThreadSafeOffsetAllocator
{
public:
    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ThreadSafeOffsetAllocator() = default;

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      size                    確保サイズ.
    //! @param[in]      maxAllocatableCount     確保可能な最大回数.
    //-------------------------------------------------------------------------
    void Init(uint32_t size, uint32_t maxAllocatableCount = 128 * 1024);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      リセットします.
    //-------------------------------------------------------------------------
    void Reset();

    //-------------------------------------------------------------------------
    //! @brief      メモリを確保します.
    //! 
    //! @param[in]      size        メモリ確保サイズ.
    //! @return     オフセットハンドルを返却します.
    //-------------------------------------------------------------------------
    OffsetHandle Alloc(uint32_t size);

    //-------------------------------------------------------------------------
    //! @brief      メモリを確保します.
    //! 
    //! @param[in]      size        メモリ確保サイズ.
    //! @param[in]      alignment   メモリアライメント.
    //! @return     オフセットハンドルを返却します.
    //-------------------------------------------------------------------------
    OffsetHandle Alloc(uint32_t size, uint32_t alignment);

    //-------------------------------------------------------------------------
    //! @brief      メモリを解放します.
    //-------------------------------------------------------------------------
    void Free(OffsetHandle& handle);

    //-------------------------------------------------------------------------
    //! @brief      使用サイズを取得します.
    //! 
    //! @return     使用サイズを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetUsedSize() const;

    //-------------------------------------------------------------------------
    //! @brief      未使用サイズを取得します.
    //! 
    //! @return     未使用サイズを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetFreeSize() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    SpinLock        m_Lock;
    OffsetAllocator m_Allocator;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asf
